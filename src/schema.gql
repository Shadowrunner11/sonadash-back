# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type PaginationInfo {
  page: Int!
  total: Int!
  hasNext: Boolean
}

type Issue {
  sonarKey: String!
  observation: String!
  severity: String!
  language: String!
  rule: String!
  startLine: Float!
  developerEmail: String
  issueCreatedAt: DateTime!
  issueUpdatedAt: DateTime!
  sonarHash: String
  status: String!
  scope: String
  tags: [String]
  sonarRuleMessage: String
  file: String!
  project: String!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type PaginatedIssues {
  pagination: PaginationInfo!
  data: [Issue]!
}

type Project {
  sonarKey: String!
  name: String!
  qualifier: String!
  isFavorite: Boolean
  tags: [String]!
  visibility: String!
  needIssueSync: Boolean
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PaginatedProjects {
  pagination: PaginationInfo!
  data: [Project]!
}

type Coverage {
  totalCoveragePercent: Float
  linesToCover: Float
  linesNoCoverage: Float
  linesCoveragePercent: Float
  qtyConditionsToCover: Float
  qtyConditionsWithoutCover: Float
  conditionsCoveragePercentage: Float
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  sonarKey: String
}

type PaginatedCoverageMetrics {
  pagination: PaginationInfo!
  data: [Coverage]!
}

type Duplication {
  totalDensityPercent: Float!
  duplicatedLines: Float!
  duplicatedBlocks: Float!
  duplicatedFiles: Float!
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String
  sonarKey: String
}

type PaginatedDuplicatedMetrics {
  pagination: PaginationInfo!
  data: [Duplication]!
}

type AuthorGraphql {
  email: String!
  firstname: String
  lastname: String
  squad: String
  tribe: String
  chapter: String
  provider: String
  role: String
  status: String
  _id: ID!
}

type PaginatedAuthors {
  pagination: PaginationInfo!
  data: [AuthorGraphql!]!
}

type AuthorUpsertRespose {
  success: Boolean!
}

type Query {
  issue(_id: ID!): Issue!
  paginatedIssues(page: Int!, limit: Int! = 10, filter: IssuesFilter): PaginatedIssues!
  project(_id: ID!): Project!
  paginatedProjects(page: Int!, limit: Int! = 10): PaginatedProjects!
  paginatedCoverageMetrics(page: Int!, limit: Int! = 10): PaginatedCoverageMetrics!
  paginatedDuplicatedMetrics(page: Int!, limit: Int! = 10): PaginatedDuplicatedMetrics!
  paginatedAuthors(page: Int!, limit: Float! = 10, filter: AuthorsFilters): PaginatedAuthors!
}

input IssuesFilter {
  createdAtFilter: TimeFilter
  updatedAtFilter: TimeFilter
  _ids: FilterItemsString
  sonarKeys: FilterItemsString
  observations: FilterItemsString
  developerEmails: FilterItemsString
  file: FilterItemString
  scope: FilterItemString
  rules: FilterItemsString
  projects: FilterItemsString
  issueCreatedAt: TimeFilter
  issuedUpdatedAt: TimeFilter
  status: FilterItemString
}

input TimeFilter {
  beforeDate: DateTime
  afterDate: DateTime
}

input FilterItemsString {
  isExclusion: Boolean
  values: [String!]!
}

input FilterItemString {
  isExclusion: Boolean
  value: String!
}

input AuthorsFilters {
  createdAtFilter: TimeFilter
  updatedAtFilter: TimeFilter
  _ids: FilterItemsString
  email: FilterItemsString
}

type Mutation {
  upsertAuthor(input: AuthorsInput!): AuthorUpsertRespose!
}

input AuthorsInput {
  authors: [AuthorInput!]!
}

input AuthorInput {
  email: String!
  firstname: String
  lastname: String
  squad: String
  tribe: String
  chapter: String
  provider: String
  role: String
  status: String
}